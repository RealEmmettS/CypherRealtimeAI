// Example Tool Definition (Do not modify, for reference only)
// ---
// {
//   "name": "fetchPerplexityResponse",
//   "description": "Fetches a response based on user query to provide assistance through an AI model.",
//   "strict": true,
//   "parameters": {
//     "type": "object",
//     "required": [
//       "userQuestion"
//     ],
//     "properties": {
//       "userQuestion": {
//         "type": "string",
//         "description": "The raw string user query"
//       }
//     },
//     "additionalProperties": false
//   }
// }
// ---

// Node.js Implementation
// -------------------------------------------------------
// Requirements: 
// 1. Install node-fetch if not installed: `npm install node-fetch`
// 2. Adjust the userQuestion as desired.
//
// This file shows how to implement and use fetchPerplexityResponse.
// -------------------------------------------------------

const fetch = require('node-fetch');

/**
 * Fetches a response from the Perplexity API.
 * @param {string} userQuestion - The user's question.
 * @returns {Promise<Object>} - The API response object.
 */
async function fetchPerplexityResponse(userQuestion) {
  const options = {
    method: 'POST',
    headers: {
      Authorization: 'Bearer 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', // Actual token
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: "llama-3.1-sonar-large-128k-online",
      return_images: false,
      return_related_questions: true,
      stream: false,
      temperature: 0.5,
      messages: [
        {
          content: "You are an internet-based AI assistant, helping another AI assistant (a phone agent) to assist a human. The phone agent will pass along the human's question, and you need to give the phone agent a quick, concise, and accurate response.",
          role: "system"
        },
        {
          role: "user",
          content: userQuestion
        }
      ]
    })
  };

  try {
    const response = await fetch('https://api.perplexity.ai/chat/completions', options);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Error fetching Perplexity API response:', error);
    throw error;
  }
}

// Example usage of the function (this part can be modified as needed)
(async () => {
  const userQuestion = "How many stars are there in the universe?";
  try {
    const apiResponse = await fetchPerplexityResponse(userQuestion);
    console.log('API Response:', apiResponse);
    // Now you can process `apiResponse` as needed for your application.
  } catch (error) {
    console.error('Error:', error);
  }
})();